function sysCall_init()
         
    -- This is executed exactly once, the first time this script is executed
    bubbleRobBase=sim.getObject('.') -- this is bubbleRob's handle
    leftMotor=sim.getObject("./leftMotor") -- Handle of the left motor
    rightMotor=sim.getObject("./rightMotor") -- Handle of the right motor
    noseSensor=sim.getObject("./sensingNose") -- Handle of the proximity sensor
    leftSensor=sim.getObject("./leftSensor") -- Handle of the left ray sensor
    rightSensor=sim.getObject("./rightSensor") -- Handle of the right ray sensor
    hugLeft = false
    hugRight = false
    minMaxSpeed={50*math.pi/180,300*math.pi/180} -- Min and max speeds for each motor
    backUntilTime=-1 -- Tells whether bubbleRob is in forward or backward mode
    turnUntilTime=-1 -- Tells whether bubbleRob is in turning mode
    robotCollection=sim.createCollection(0)
    sim.addItemToCollection(robotCollection,sim.handle_tree,bubbleRobBase,0)
    distanceSegment=sim.addDrawingObject(sim.drawing_lines,4,0,-1,1,{0,1,0})
    robotTrace=sim.addDrawingObject(sim.drawing_linestrip+sim.drawing_cyclic,2,0,-1,200,{1,1,0},nil,nil,{1,1,0})
    graph=sim.getObject('./graph')
    distStream=sim.addGraphStream(graph,'bubbleRob clearance','m',0,{1,0,0})
    -- Create the custom UI:
    xml = '<ui title="'..sim.getObjectAlias(bubbleRobBase,1)..' speed" closeable="false" resizeable="false" activate="false">'..[[
                <hslider minimum="0" maximum="100" on-change="speedChange_callback" id="1"/>
            <label text="" style="* {margin-left: 300px;}"/>
        </ui>
        ]]
    ui=simUI.create(xml)
    speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5
    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
    
end

function sysCall_sensing()
    local result,distData=sim.checkDistance(robotCollection,sim.handle_all)
    if result>0 then
        sim.addDrawingObjectItem(distanceSegment,nil)
        sim.addDrawingObjectItem(distanceSegment,distData)
        sim.setGraphStreamValue(graph,distStream,distData[7])
    end
    local p=sim.getObjectPosition(bubbleRobBase,sim.handle_world)
    sim.addDrawingObjectItem(robotTrace,p)
end 

function speedChange_callback(ui,id,newVal)
    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end

function driveStraight()
sim.setJointTargetVelocity(leftMotor,speed)
sim.setJointTargetVelocity(rightMotor,speed)
end

function goLeft()
sim.setJointTargetVelocity(leftMotor, speed)
sim.setJointTargetVelocity(rightMotor, speed*1.6)
end

function goRight()
sim.setJointTargetVelocity(leftMotor, speed*1.6)
sim.setJointTargetVelocity(rightMotor, speed)
end

function sysCall_actuation() 
    result=sim.readProximitySensor(noseSensor) -- Read the proximity sensor
    leftResult = sim.readProximitySensor(leftSensor) -- Read the left ray sensor
    rightResult = sim.readProximitySensor(rightSensor) -- Read the right ray sensor
    
    -- If we detected something in front of the nose, we set the backward mode:
    if (result>0) then backUntilTime=sim.getSimulationTime()+2 end 

    -- When in backward mode, we simply backup in a curve at reduced speed
    if (not (backUntilTime<sim.getSimulationTime())) then
        if (hugLeft) then
            sim.setJointTargetVelocity(leftMotor,-speed/8)
            sim.setJointTargetVelocity(rightMotor,-speed/2)
        else
            sim.setJointTargetVelocity(leftMotor,-speed/2)
            sim.setJointTargetVelocity(rightMotor,-speed/8)
        end
        return
    end
    
    if (turnUntilTime == -1) then
        if(hugLeft) then
            if (leftResult>0) then
                driveStraight()
                return
            else
                turnUntilTime = sim.getSimulationTime() + 8
                goLeft()
                return
            end
        elseif(hugRight) then
            if (rightResult>0) then
                driveStraight()
                return
            else
                turnUntilTime = sim.getSimulationTime() + 8
                goRight()
                return
            end
        else
            if ((leftResult>0) and (rightResult>0)) then
                driveStraight()
                return
            elseif (leftResult>0) then
                hugLeft = true
                driveStraight()
                return
            elseif (rightResult>0) then
                hugRight = true
                driveStraight()
                return
            else
                driveStraight()
                return
            end
        end
    elseif (turnUntilTime<sim.getSimulationTime()) then
        turnUntilTime = -1
        hugLeft = false
        hugRight = false
        driveStraight()
    else
        if(hugLeft) then
            if(leftResult>0) then
                turnUntilTime = -1
            end
            goLeft()
        end
        if(hugRight) then
            if(rightResult>0) then
                turnUntilTime = -1
            end
            goRight()
        end
    end
end

function sysCall_cleanup() 
    simUI.destroy(ui)
end 
